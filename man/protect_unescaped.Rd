% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/asis-nodes.R
\name{protect_unescaped}
\alias{protect_unescaped}
\title{Protect unescaped square brackets from being escaped}
\usage{
protect_unescaped(body, txt, offset = 0L, ns = md_ns())
}
\arguments{
\item{body}{an XML body}

\item{txt}{the text of a source file}

\item{offset}{the offset in lines of the yaml header defaults to 0,
indicating that the text has the yaml header stripped off.}

\item{ns}{an the namespace that resolves the Markdown namespace (defaults to
\code{\link[=md_ns]{md_ns()}})}
}
\description{
Commonmark allows both \verb{[unescaped]} and \verb{\[escaped\]} square brackets, but
in the XML representation, it makes no note of which square brackets were
originally escaped and thus will escape both in the output.
}
\details{
To fix this, we dive back into the source document and find the brackets that
were originally escaped and wrap those characters in protective tags so that
they do not become escaped when the XML is written. This has the benefit of
protecting footnotes and reference style links for child documents.
}
\note{
This requires documents to be read in with \code{sourcepos = TRUE}
}
\examples{
f <- system.file("extdata", "link-test.md", package = "tinkr")
md <- yarn$new(f, sourcepos = TRUE, unescaped = FALSE)
md$show()
if (requireNamespace("withr")) {
lnks <- withr::with_namespace("tinkr", 
  protect_unescaped(md$body, readLines(md$path), offset = length(md$yaml)))
md$body <- lnks
md$show()
}
}
\keyword{internal}
