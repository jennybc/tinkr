% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/class-yarn.R
\name{yarn}
\alias{yarn}
\title{R6 class containing XML representation of Markdown}
\description{
Wrapper around an XML representation of a Markdown document. It contains four
publicly accessible slots: path, yaml, body, and ns.
}
\details{
This class is a fancy wrapper around the results of [tinkr::to_xml()] and
has methods that make it easier to add, analyze, remove, or write elements
of your markdown document.
}
\examples{

## ------------------------------------------------
## Method `yarn$new`
## ------------------------------------------------

path <- system.file("extdata", "example1.md", package = "tinkr")
ex1 <- tinkr::yarn$new(path)
ex1
path2 <- system.file("extdata", "example2.Rmd", package = "tinkr")
ex2 <- tinkr::yarn$new(path2)
ex2

## ------------------------------------------------
## Method `yarn$write`
## ------------------------------------------------

path <- system.file("extdata", "example1.md", package = "tinkr")
ex1 <- tinkr::yarn$new(path)
ex1
tmp <- tempfile()
try(readLines(tmp)) # nothing in the file
ex1$write(tmp)
head(readLines(tmp)) # now a markdown file
unlink(tmp)
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{path}}{\[`character`\] path to file on disk}

\item{\code{yaml}}{\[`character`\] text block at head of file}

\item{\code{body}}{\[`xml_document`\] an xml document of the (R)Markdown file.}

\item{\code{ns}}{\[`xml_document`\] an xml namespace object definining "md" to
commonmark.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{yarn$new()}}
\item \href{#method-write}{\code{yarn$write()}}
\item \href{#method-clone}{\code{yarn$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Create a new yarn document
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{yarn$new(path = NULL, encoding = "UTF-8", sourcepos = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{path}}{\[`character`\] path to a markdown episode file on disk}

\item{\code{encoding}}{\[`character`\] encoding passed to [readLines()]}

\item{\code{sourcepos}}{passed to [commonmark::markdown_xml()]. If `TRUE`, the
source position of the file will be included as a "sourcepos" attribute.
Defaults to `FALSE`.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new yarn object containing an XML representation of a 
(R)Markdown file.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{path <- system.file("extdata", "example1.md", package = "tinkr")
ex1 <- tinkr::yarn$new(path)
ex1
path2 <- system.file("extdata", "example2.Rmd", package = "tinkr")
ex2 <- tinkr::yarn$new(path2)
ex2
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-write"></a>}}
\if{latex}{\out{\hypertarget{method-write}{}}}
\subsection{Method \code{write()}}{
Write a yarn document to markdown/Rmarkdown
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{yarn$write(
  path = NULL,
  stylesheet_path = system.file("extdata", "xml2md_gfm.xsl", package = "tinkr")
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{path}}{path to the file you want to write}

\item{\code{stylesheet_path}}{path to the xsl stylesheet to convert XML to markdown.}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{path <- system.file("extdata", "example1.md", package = "tinkr")
ex1 <- tinkr::yarn$new(path)
ex1
tmp <- tempfile()
try(readLines(tmp)) # nothing in the file
ex1$write(tmp)
head(readLines(tmp)) # now a markdown file
unlink(tmp)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{yarn$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
